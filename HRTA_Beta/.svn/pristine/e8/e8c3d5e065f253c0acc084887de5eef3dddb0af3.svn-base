package com.toogram.cep.ui;

import org.apache.axis2.AxisFault;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.ServiceClient;
import org.apache.axis2.context.ConfigurationContext;
import org.wso2.carbon.CarbonConstants;
import org.wso2.carbon.event.formatter.stub.EventFormatterAdminServiceStub;
import org.wso2.carbon.event.output.adaptor.manager.stub.OutputEventAdaptorManagerAdminServiceStub;
import org.wso2.carbon.event.stream.manager.stub.EventStreamAdminServiceStub;
import org.wso2.carbon.event.stream.manager.stub.types.EventStreamAttributeDto;
import org.wso2.carbon.event.stream.manager.stub.types.EventStreamDefinitionDto;
import org.wso2.carbon.ui.CarbonUIUtil;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.util.ArrayList;
import java.util.List;

public class ToogramEventFormatterUIUtils {

    public static EventFormatterAdminServiceStub getEventFormatterAdminService(
            ServletConfig config, HttpSession session,
            HttpServletRequest request, HttpServletResponse response)
            throws AxisFault {
        ConfigurationContext configContext = (ConfigurationContext) config.getServletContext()
                .getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);
        
        String SEVER_URL = (String)session.getAttribute("serverURL");
        
        String sessionCookie = (String)session.getAttribute("authCookie");
        
//        try {
//	        if(SEVER_URL == null || "".equals(SEVER_URL) || "null".equals(SEVER_URL) || 
//	        		sessionCookie == null || "".equals(sessionCookie) || "null".equals(SEVER_URL)) {
//	        	response.sendRedirect("../cep-admin/hrta_login.jsp");
//	        }
//        } catch(Exception e) {
//        	
//        }
        
        String serverURL = SEVER_URL + "EventFormatterAdminService.EventFormatterAdminServiceHttpsSoap12Endpoint";
        
        EventFormatterAdminServiceStub stub = new EventFormatterAdminServiceStub(configContext, serverURL);

        ServiceClient client = stub._getServiceClient();
        Options option = client.getOptions();
        option.setManageSession(true);
        option.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, sessionCookie);

        return stub;
    }

    public static EventStreamAdminServiceStub getEventStreamAdminService(
            ServletConfig config, HttpSession session,
            HttpServletRequest request, HttpServletResponse response)
            throws AxisFault {
        ConfigurationContext configContext = (ConfigurationContext) config.getServletContext()
                .getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);
        
        String SEVER_URL = (String)session.getAttribute("serverURL");
        
        String sessionCookie = (String)session.getAttribute("authCookie");
        
//        try {
//	        if(SEVER_URL == null || "".equals(SEVER_URL) || "null".equals(SEVER_URL) || 
//	        		sessionCookie == null || "".equals(sessionCookie) || "null".equals(SEVER_URL)) {
//	        	response.sendRedirect("../cep-admin/hrta_login.jsp");
//	        }
//        } catch(Exception e) {
//        	
//        }
        
        String serverURL = SEVER_URL + "EventStreamAdminService.EventStreamAdminServiceHttpsSoap12Endpoint";
        
        EventStreamAdminServiceStub stub = new EventStreamAdminServiceStub(configContext, serverURL);
        
        ServiceClient client = stub._getServiceClient();
        Options option = client.getOptions();
        option.setManageSession(true);
        option.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, sessionCookie);

        return stub;
    }

    public static OutputEventAdaptorManagerAdminServiceStub getOutputEventManagerAdminService(
            ServletConfig config, HttpSession session,
            HttpServletRequest request, HttpServletResponse response)
            throws AxisFault {
        ConfigurationContext configContext = (ConfigurationContext) config.getServletContext()
                .getAttribute(CarbonConstants.CONFIGURATION_CONTEXT);

        String SEVER_URL = (String)session.getAttribute("serverURL");
        
        String sessionCookie = (String)session.getAttribute("authCookie");
        
//        try {
//	        if(SEVER_URL == null || "".equals(SEVER_URL) || "null".equals(SEVER_URL) || 
//	        		sessionCookie == null || "".equals(sessionCookie) || "null".equals(SEVER_URL)) {
//	        	response.sendRedirect("../cep-admin/hrta_login.jsp");
//	        }
//        } catch(Exception e) {
//        	
//        }
        
        String serverURL = SEVER_URL + "OutputEventAdaptorManagerAdminService.OutputEventAdaptorManagerAdminServiceHttpsSoap12Endpoint";
        OutputEventAdaptorManagerAdminServiceStub stub = new OutputEventAdaptorManagerAdminServiceStub(configContext, serverURL);

        
        ServiceClient client = stub._getServiceClient();
        Options option = client.getOptions();
        option.setManageSession(true);
        option.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, sessionCookie);

        return stub;
    }

    public static List<String> getAttributeListWithPrefix(EventStreamDefinitionDto streamDefinitionDto) {
        List<String> attributeList = new ArrayList<String>();

        if (streamDefinitionDto.getMetaData() != null) {
            for (EventStreamAttributeDto metaData : streamDefinitionDto.getMetaData()) {
                attributeList.add("meta_" + metaData.getAttributeName() + " " + metaData.getAttributeType());
            }
        }

        if (streamDefinitionDto.getCorrelationData() != null) {
            for (EventStreamAttributeDto correlationData : streamDefinitionDto.getCorrelationData()) {
                attributeList.add("correlation_" + correlationData.getAttributeName() + " " + correlationData.getAttributeType());
            }
        }

        if (streamDefinitionDto.getPayloadData() != null) {
            for (EventStreamAttributeDto payloadData : streamDefinitionDto.getPayloadData()) {
                attributeList.add(payloadData.getAttributeName() + " " + payloadData.getAttributeType());
            }
        }
        return attributeList;
    }

}
